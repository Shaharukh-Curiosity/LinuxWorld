// Generated by CoffeeScript 1.12.7
(function() {
<<<<<<< HEAD
  var XMLCData, XMLNode,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLNode = require('./XMLNode');
=======
  var NodeType, XMLCData, XMLCharacterData,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  NodeType = require('./NodeType');

  XMLCharacterData = require('./XMLCharacterData');
>>>>>>> dc7ca8caa9759d4a9def25682707f917f8e9a75e

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
<<<<<<< HEAD
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
=======
        throw new Error("Missing CDATA text. " + this.debugInfo());
      }
      this.name = "#cdata-section";
      this.type = NodeType.CData;
      this.value = this.stringify.cdata(text);
>>>>>>> dc7ca8caa9759d4a9def25682707f917f8e9a75e
    }

    XMLCData.prototype.clone = function() {
      return Object.create(this);
    };

    XMLCData.prototype.toString = function(options) {
<<<<<<< HEAD
      return this.options.writer.set(options).cdata(this);
=======
      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
>>>>>>> dc7ca8caa9759d4a9def25682707f917f8e9a75e
    };

    return XMLCData;

<<<<<<< HEAD
  })(XMLNode);
=======
  })(XMLCharacterData);
>>>>>>> dc7ca8caa9759d4a9def25682707f917f8e9a75e

}).call(this);
